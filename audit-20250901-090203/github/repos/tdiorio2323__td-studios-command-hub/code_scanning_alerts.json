[{"number":18,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-07-30T23:47:38Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/18","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/18","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insufficient-password-hash","severity":"warning","description":"Use of password hash with insufficient computational effort","name":"js/insufficient-password-hash","tags":["external/cwe/cwe-916","security"],"full_description":"Creating a hash of a password with low computational effort makes the hash vulnerable to password cracking attacks.","help":"# Use of password hash with insufficient computational effort\nStoring cryptographic hashes of passwords is standard security practice, but it is equally important to select the right hashing scheme. If an attacker obtains the hashed passwords of an application, the password hashing scheme should still prevent the attacker from easily obtaining the original cleartext passwords.\n\nA good password hashing scheme requires a computation that cannot be done efficiently. Standard hashing schemes, such as `md5` or `sha1`, are efficiently computable, and are therefore not suitable for password hashing.\n\n\n## Recommendation\nUse a secure password hashing scheme such as `bcrypt`, `scrypt`, `PBKDF2`, or `Argon2`.\n\n\n## Example\nIn the example below, the `md5` algorithm computes the hash of a password.\n\n\n```javascript\nconst crypto = require(\"crypto\");\nfunction hashPassword(password) {\n    var hasher = crypto.createHash('md5');\n    var hashed = hasher.update(password).digest(\"hex\"); // BAD\n    return hashed;\n}\n\n```\nThis is not secure, since the password can be efficiently cracked by an attacker that obtains the hash. A more secure scheme is to hash the password with the `bcrypt` algorithm:\n\n\n```javascript\nconst bcrypt = require(\"bcrypt\");\nfunction hashPassword(password, salt) {\n  var hashed = bcrypt.hashSync(password, salt); // GOOD\n  return hashed;\n}\n\n```\n\n## References\n* OWASP: [Password storage](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"83ba31e63a6477f130f934ecf32b6a1ee889cbfc","message":{"text":"Password from an access to password is hashed insecurely.\nPassword from an access to password is hashed insecurely."},"location":{"path":"src/app/api/auth/login/route.ts","start_line":43,"end_line":43,"start_column":56,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/18/instances","dismissal_approved_by":null},{"number":17,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/17","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/17","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This replaces only the first occurrence of \"#\"."},"location":{"path":"_next/static/chunks/main-41bc682f88ea5440.js","start_line":1,"end_line":1,"start_column":95049,"end_column":95058},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/17/instances","dismissal_approved_by":null},{"number":16,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/16","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/16","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This replaces only the first occurrence of /%3A/i."},"location":{"path":"_next/static/chunks/main-41bc682f88ea5440.js","start_line":1,"end_line":1,"start_column":94601,"end_column":94630},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/16/instances","dismissal_approved_by":null},{"number":15,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-07-30T23:47:38Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/15","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/15","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"83ba31e63a6477f130f934ecf32b6a1ee889cbfc","message":{"text":"This string may still contain on, which may cause an HTML attribute injection vulnerability."},"location":{"path":"src/middleware/validation.ts","start_line":114,"end_line":117,"start_column":10,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/15/instances","dismissal_approved_by":null},{"number":14,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-07-30T23:47:38Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/14","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/14","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"83ba31e63a6477f130f934ecf32b6a1ee889cbfc","message":{"text":"This check does not consider data: and vbscript:."},"location":{"path":"src/middleware/validation.ts","start_line":114,"end_line":117,"start_column":10,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/14/instances","dismissal_approved_by":null},{"number":13,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/13","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/13","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":336805,"end_column":336809},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/13/instances","dismissal_approved_by":null},{"number":12,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/12","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/12","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":270044,"end_column":270048},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/12/instances","dismissal_approved_by":null},{"number":11,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/11","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/11","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":218383,"end_column":218387},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/11/instances","dismissal_approved_by":null},{"number":10,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/10","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/10","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":160898,"end_column":160902},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/10/instances","dismissal_approved_by":null},{"number":9,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/9","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/9","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":147768,"end_column":147772},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/9/instances","dismissal_approved_by":null},{"number":8,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/8","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/8","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":147356,"end_column":147360},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/8/instances","dismissal_approved_by":null},{"number":7,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/7","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/7","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":146918,"end_column":146922},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/7/instances","dismissal_approved_by":null},{"number":6,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/6","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/6","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":125779,"end_column":125783},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/6/instances","dismissal_approved_by":null},{"number":5,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/5","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/5","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":106738,"end_column":106742},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/5/instances","dismissal_approved_by":null},{"number":4,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/4","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/4","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":83622,"end_column":83626},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/4/instances","dismissal_approved_by":null},{"number":3,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/3","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/3","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":39801,"end_column":39805},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/3/instances","dismissal_approved_by":null},{"number":2,"created_at":"2025-07-30T23:47:38Z","updated_at":"2025-08-15T03:36:56Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/2","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/2","state":"fixed","fixed_at":"2025-08-15T03:36:56Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"128c1841e1612258680a83a14932ba1144458be5","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"_next/static/chunks/bd904a5c-078716a8e125f184.js","start_line":1,"end_line":1,"start_column":35826,"end_column":35830},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/2/instances","dismissal_approved_by":null},{"number":1,"created_at":"2025-07-30T13:49:31Z","updated_at":"2025-07-30T13:49:31Z","url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/1","html_url":"https://github.com/tdiorio2323/td-studios-command-hub/security/code-scanning/1","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"actions\"}","category":"/language:actions","state":"open","commit_sha":"83ba31e63a6477f130f934ecf32b6a1ee889cbfc","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/npm-publish-github-packages.yml","start_line":12,"end_line":21,"start_column":5,"end_column":3},"classifications":[]},"instances_url":"https://api.github.com/repos/tdiorio2323/td-studios-command-hub/code-scanning/alerts/1/instances","dismissal_approved_by":null}]